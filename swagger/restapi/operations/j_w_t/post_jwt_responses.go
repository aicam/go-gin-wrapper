package j_w_t

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/hiromaily/go-gin-wrapper/swagger/models"
)

/*PostJwtOK Code and JWT.

swagger:response postJwtOK
*/
type PostJwtOK struct {

	/*
	  In: Body
	*/
	Payload *models.Jwt `json:"body,omitempty"`
}

// NewPostJwtOK creates PostJwtOK with default headers values
func NewPostJwtOK() *PostJwtOK {
	return &PostJwtOK{}
}

// WithPayload adds the payload to the post jwt o k response
func (o *PostJwtOK) WithPayload(payload *models.Jwt) *PostJwtOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post jwt o k response
func (o *PostJwtOK) SetPayload(payload *models.Jwt) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostJwtOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*PostJwtDefault Unexpected error.

swagger:response postJwtDefault
*/
type PostJwtDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostJwtDefault creates PostJwtDefault with default headers values
func NewPostJwtDefault(code int) *PostJwtDefault {
	if code <= 0 {
		code = 500
	}

	return &PostJwtDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the post jwt default response
func (o *PostJwtDefault) WithStatusCode(code int) *PostJwtDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the post jwt default response
func (o *PostJwtDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the post jwt default response
func (o *PostJwtDefault) WithPayload(payload *models.Error) *PostJwtDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post jwt default response
func (o *PostJwtDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostJwtDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
