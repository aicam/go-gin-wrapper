package j_w_t

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostJwtHandlerFunc turns a function with the right signature into a post jwt handler
type PostJwtHandlerFunc func(PostJwtParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostJwtHandlerFunc) Handle(params PostJwtParams) middleware.Responder {
	return fn(params)
}

// PostJwtHandler interface for that can handle valid post jwt params
type PostJwtHandler interface {
	Handle(PostJwtParams) middleware.Responder
}

// NewPostJwt creates a new http.Handler for the post jwt operation
func NewPostJwt(ctx *middleware.Context, handler PostJwtHandler) *PostJwt {
	return &PostJwt{Context: ctx, Handler: handler}
}

/*PostJwt swagger:route POST /jwt JWT postJwt

JWT authentication

In advance, JWT is required to call all APIs.

*/
type PostJwt struct {
	Context *middleware.Context
	Handler PostJwtHandler
}

func (o *PostJwt) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPostJwtParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
