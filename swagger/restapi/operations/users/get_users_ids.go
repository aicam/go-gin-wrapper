package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetUsersIdsHandlerFunc turns a function with the right signature into a get users ids handler
type GetUsersIdsHandlerFunc func(GetUsersIdsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetUsersIdsHandlerFunc) Handle(params GetUsersIdsParams) middleware.Responder {
	return fn(params)
}

// GetUsersIdsHandler interface for that can handle valid get users ids params
type GetUsersIdsHandler interface {
	Handle(GetUsersIdsParams) middleware.Responder
}

// NewGetUsersIds creates a new http.Handler for the get users ids operation
func NewGetUsersIds(ctx *middleware.Context, handler GetUsersIdsHandler) *GetUsersIds {
	return &GetUsersIds{Context: ctx, Handler: handler}
}

/*GetUsersIds swagger:route GET /users/ids Users getUsersIds

Get all user ID

Get all user ID.

*/
type GetUsersIds struct {
	Context *middleware.Context
	Handler GetUsersIdsHandler
}

func (o *GetUsersIds) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetUsersIdsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
