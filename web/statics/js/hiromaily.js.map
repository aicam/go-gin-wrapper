{"version":3,"sources":["hiromaily.es6.js"],"names":["hy","Object","setToken","token","jwtCode","document","getElementById","value","getTokenHeader","updateUserList","users","console","info","strHtml","forEach","user","id","firstName","lastName","email","update","userListBody","innerHTML","square","num","sendAjax","url","method","content","sendData","contentType","JSON","stringify","swal","$","ajax","encodeURI","type","beforeSend","xhr","setRequestHeader","hiromaily_header","hiromaily_key","crossDomain","dataType","data","done","textStatus","jqXHR","log","code","fail","errorThrown","abc"],"mappings":"AAAA;;AAEA;;AACA,IAAIA,KAAK,IAAIC,MAAJ,EAAT;AACA;AAAA;AACE;AACA;AACA;AACA,QAAIC,WAAW,SAAXA,QAAW,CAACC,KAAD,EAAW;AACxB,UAAIC,UAAUC,SAASC,cAAT,CAAwB,SAAxB,CAAd;AACAF,cAAQG,KAAR,GAAgBJ,KAAhB;AACD,KAHD;;AAKA,QAAIK,iBAAiB,SAAjBA,cAAiB,GAAM;AACzB,UAAIJ,UAAUC,SAASC,cAAT,CAAwB,SAAxB,CAAd;AACA,aAAOF,QAAQG,KAAf;AACD,KAHD;;AAKA,QAAIE,iBAAiB,SAAjBA,cAAiB,CAACC,KAAD,EAAW;AAC9BC,cAAQC,IAAR,CAAa,kBAAb;AACA,UAAIC,UAAU,EAAd;AACA;AACAH,YAAMI,OAAN,CAAc,gBAAQ;AACpB;AACAD,gCAAsBE,KAAKC,EAA3B,iBAAyCD,KAAKE,SAA9C,iBAAmEF,KAAKG,QAAxE,mBACAH,KAAKI,KADL,+BACoCJ,KAAKK,MADzC;AAED,OAJD;AAKA,UAAIC,eAAehB,SAASC,cAAT,CAAwB,cAAxB,CAAnB;AACAe,mBAAaC,SAAb,GAAyBT,OAAzB;AACD,KAXD;;AAaA,QAAIU,SAAS,SAATA,MAAS,CAACC,GAAD,EAAS;AACpB,aAAOA,MAAMA,GAAb;AACD,KAFD;;AAIA;AACA;AACA;AACA;AACAxB,OAAGyB,QAAH,GAAc,UAACC,GAAD,EAAMC,MAAN,EAAcC,OAAd,EAAuBC,QAAvB,EAAoC;AAChD,UAAIC,cAAc,mCAAlB;AACA,UAAGF,WAAW,MAAd,EAAqB;AACnBE,sBAAc,kBAAd;AACAD,mBAAWE,KAAKC,SAAL,CAAeH,QAAf,CAAX;AACD;;AAED,UAAI1B,QAAQK,gBAAZ;AACA,UAAIkB,OAAO,UAAP,IAAqBvB,SAAS,EAAlC,EAAqC;AACnC8B,aAAK,QAAL,EAAe,qCAAf,EAAsD,OAAtD;AACA;AACD,OAHD,MAGO,IAAGP,OAAO,UAAV,EAAqB;AAC1BvB,gBAAQ,YAAYA,KAApB;AACD;;AAED;AACA+B,QAAEC,IAAF,CAAO;AACLT,aAAKU,UAAUV,GAAV,CADA;AAELW,cAAMV,MAFD;AAGLW,oBAAY,oBAAUC,GAAV,EAAe;AACzB;AACA;AACAA,cAAIC,gBAAJ,CAAqBC,gBAArB,EAAuCC,aAAvC;AACA;AACA,cAAIvC,SAAS,EAAb,EAAgB;AACdoC,gBAAIC,gBAAJ,CAAqB,eAArB,EAAsCrC,KAAtC;AACD;AACF,SAXI;AAYL;AACAwC,qBAAa,KAbR;AAcLb,qBAAaA,WAdR,EAc6B;AAClCc,kBAAa,MAfR,EAe6B;AAClCC,cAAahB;AAhBR,OAAP,EAkBCiB,IAlBD,CAkBM,UAAUD,IAAV,EAAgBE,UAAhB,EAA4BC,KAA5B,EAAoC;AACxC;AACArC,gBAAQsC,GAAR,CAAYJ,IAAZ;AACA,YAAIlB,UAAQ,KAAR,IAAiBkB,KAAKK,IAAL,IAAW,CAAhC,EAAkC;AAChCzC,yBAAeoC,KAAKnC,KAApB;AACD,SAFD,MAEM,IAAIiB,UAAQ,MAAR,IAAkBkB,KAAK1C,KAAL,IAAc,IAApC,EAAyC;AAC7CQ,kBAAQsC,GAAR,CAAYJ,KAAK1C,KAAjB;AACAD,mBAAS2C,KAAK1C,KAAd;AACD;AACD8B,aAAK,UAAL,EAAiB,mBAAjB,EAAsC,SAAtC;AACD,OA5BD,EA6BCkB,IA7BD,CA6BM,UAAUH,KAAV,EAAiBD,UAAjB,EAA6BK,WAA7B,EAA2C;AAC/CnB,aAAK,QAAL,EAAe,gCAAf,EAAiD,OAAjD;AACD,OA/BD;AAgCD,KAhDD;;AAkDAjC,OAAGqD,GAAH,GAAS,YAAM;AACb1C,cAAQsC,GAAR,CAAY1B,OAAO,CAAP,CAAZ;AACD,KAFD;AArFF;AAwFC;;AAED;AACA","file":"hiromaily.js","sourcesContent":["'use strict'\n\n// hy object\nlet hy = new Object\n{\n  //---------------------------------------------------------------------------\n  //private\n  //---------------------------------------------------------------------------\n  let setToken = (token) => {\n    var jwtCode = document.getElementById('jwtCode')\n    jwtCode.value = token\n  }\n\n  let getTokenHeader = () => {\n    var jwtCode = document.getElementById('jwtCode')\n    return jwtCode.value\n  }\n\n  let updateUserList = (users) => {\n    console.info('updateUserList()')\n    let strHtml = ''\n    //for (let user of users) {\n    users.forEach(user => {\n      //console.log(users[i].id, users[i].firstName);\n      strHtml += `<tr><td>${user.id}</td><td>${user.firstName}</td><td>${user.lastName}</td>\n<td>${user.email}</td><td>*****</td><td>${user.update}</td>`\n    })\n    let userListBody = document.getElementById('userListBody')\n    userListBody.innerHTML = strHtml\n  }\n\n  let square = (num) => {\n    return num * num\n  }\n\n  //---------------------------------------------------------------------------\n  //public\n  //---------------------------------------------------------------------------\n  //ajax\n  hy.sendAjax = (url, method, content, sendData) => {\n    let contentType = \"application/x-www-form-urlencoded\"\n    if(content == \"json\"){\n      contentType = \"application/json\"\n      sendData = JSON.stringify(sendData)\n    }\n\n    var token = getTokenHeader()\n    if (url != \"/api/jwt\" && token == \"\"){\n      swal(\"error!\", \"token is required for sending ajax!\", \"error\")\n      return\n    } else if(url != \"/api/jwt\"){\n      token = \"Bearer \" + token\n    }\n\n    //for JSON\n    $.ajax({\n      url: encodeURI(url),\n      type: method,\n      beforeSend: function (xhr) {\n        //xhr.setRequestHeader('X-Custom-Header-Gin', '{{ .key }}')\n        //xhr.setRequestHeader('{{ .header }}', '{{ .key }}')\n        xhr.setRequestHeader(hiromaily_header, hiromaily_key)\n        //'Authorization': 'Bearer ' + 'YOUR_CURRENT_TOKEN'\n        if (token != \"\"){\n          xhr.setRequestHeader('Authorization', token)\n        }\n      },\n      //cache    : false,\n      crossDomain: false,\n      contentType: contentType,         //content of request body\n      dataType   : 'json',              //data type from server\n      data:        sendData,\n    })\n    .done(function( data, textStatus, jqXHR ) {\n      //console.log(JSON.stringify(data));\n      console.log(data)\n      if (method==\"get\" && data.code==0){\n        updateUserList(data.users)\n      }else if (method==\"post\" && data.token != null){\n        console.log(data.token)\n        setToken(data.token)\n      }\n      swal(\"success!\", \"user was updated!\", \"success\")\n    })\n    .fail(function( jqXHR, textStatus, errorThrown ) {\n      swal(\"error!\", \"validation error was occurred!\", \"error\")\n    })\n  }\n\n  hy.abc = () => {\n    console.log(square(5))    \n  }\n}\n\n// run\n//hy.abc()"],"sourceRoot":"/source/"}